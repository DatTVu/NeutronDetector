/*

#ifndef B1RunAction_h
#define B1RunAction_h 1

#include "G4UserRunAction.hh"
#include "globals.hh"

class G4Run;

/// Run action class
///
/// In EndOfRunAction(), it calculates the dose in the selected volume 
/// from the energy deposit accumulated via stepping and event actions.
/// The computed dose is then printed on the screen.

class B1RunAction : public G4UserRunAction
{
  public:
    B1RunAction();
    virtual ~B1RunAction();

    virtual void BeginOfRunAction(const G4Run*);
    virtual void   EndOfRunAction(const G4Run*);
};

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#endif*/



#ifndef B1RunAction_h
#define B1RunAction_h 1

#include "G4UserRunAction.hh"
#include "G4VProcess.hh"
#include "globals.hh"
#include <map>

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

class B1DetectorConstruction;
class B1PrimaryGeneratorAction;
class HistoManager;
class G4Run;

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

class B1RunAction : public G4UserRunAction
{
  public:
    B1RunAction(B1DetectorConstruction*, B1PrimaryGeneratorAction*, HistoManager*);
   ~B1RunAction();

  public:
    void BeginOfRunAction(const G4Run*);
    void   EndOfRunAction(const G4Run*);

    void CountProcesses(const G4VProcess* process) 
                  {fProcCounter[process]++;};
				
    void SumTrack (G4double track) 
                {fTotalCount++; fSumTrack += track; fSumTrack2 += track*track;};
		
    void CountNuclearChannel(G4String, G4double);		
    void ParticleCount(G4String, G4double);
    void Balance(G4double);
                            
  private:
    B1DetectorConstruction*      fDetector;
    B1PrimaryGeneratorAction*    fPrimary;
    HistoManager*              fHistoManager;
        
    std::map<const G4VProcess*,G4int>   fProcCounter;            
    G4int fTotalCount;      //all processes counter
    G4double fSumTrack;     //sum of trackLength
    G4double fSumTrack2;    //sum of trackLength*trackLength
    
    std::map<G4String,G4int>    fNuclChannelCount;
    std::map<G4String,G4double> fNuclChannelQ;
        
    std::map<G4String,G4int> fParticleCount;
    std::map<G4String,G4double> fEmean;
    std::map<G4String,G4double> fEmin;
    std::map<G4String,G4double> fEmax;
    
    G4double fPbalance[3];        
};

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

#endif
