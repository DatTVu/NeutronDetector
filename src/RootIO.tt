#include <sstream>
#include <time.h>
#include "RootIO.hh"
#include "G4SDManager.hh"
#include "G4HCofThisEvent.hh"
#include "G4EventManager.hh"
#include "G4Event.hh"
#include <cmath>

static RootIO* instance = 0;

RootIO::RootIO()
{

}

RootIO::~RootIO()
{}

void RootIO::SetDirName(G4String name)
{
	dirname = name;
}

void RootIO::OpenFile(const G4Run* thisRun)
{
	sprintf(fname,"~/geant4examples/Build/Basic/B1/data/%s.root", dirname.c_str());
	fo = new TFile(fname,"RECREATE");  //make Root file

	sprintf(fname2,"~/geant4examples/Build/Basic/B1/data/%s.txt", dirname.c_str());
	xcl = fopen(fname2,"w");  //make Excel file

	char hist_name[256];
	const Int_t nbins = 8;
	Double_t ybins[nbins+1] = {1., 10., 100., 1000., 10000., 100000., 1000000., 10000000., 100000000.};

	sprintf(hist_name, "Alpha_Counts");

	e_histo = new TH2F(hist_name,hist_name,10001,1,10001, nbins, ybins);
	d_histo = new TH1F("SignalStrength", "SignalStrength", 10001, 1, 10001);
	e1d_histo = new TH1D("AlphaEnergy", "AlphaEnergy", nbins, ybins);

	std::cout << "Writing " << fname << std::endl;
	std::cout << "Writing " << fname2 << std::endl;

	fprintf(xcl,"\t1keV\t10keV\t100keV\t1MeV\t10MeV\t100MeV+\n");

	for(int n = 0; n < 10001; n++)
	{
		for(int j = 0; j < 9; j++)
		{
			photons[n][j] = 0;
		}
	}
	G4cout << "Done" << G4endl;
}

RootIO* RootIO::GetInstance()
{
  if (instance == 0 )
  {
    instance = new RootIO();
  }
  return instance;
}

void RootIO::WriteEnergy(G4double energy)
{
	e1d_histo->Fill(energy);
}

void RootIO::Average(int events)
{
	float scale = 1/((float) events);
	e_histo->Scale(scale);  //Scale histo to represent average over # of events
	e1d_histo->Scale(scale);

	//write Excel file
	for(int j = 0; j < 10001; j++)
	{
		fprintf(xcl,"%d cm",j+1);
		for(int k = 0; k < 9; k++)
		{
			float count = (float)(electrons[j][k])/((float) events);
			fprintf(xcl,"\t%f", count );
		}
		fprintf(xcl,"\n");
	}
}

void RootIO::CloseFile()
{
	e_histo->GetXaxis()->SetTitle("Distance in Cu (cm)");
	e_histo->GetYaxis()->SetTitle("Energy (keV)");
	e_histo->GetZaxis()->SetTitle("Alpha");
	std::cout << "\nClosing " << fname << std::endl;
	std::cout << "\nClosing " << fname2 << std::endl;
	fo->Write();
	fo->Close();  //Title, write, and close Root file

	fclose(xcl);  //close Excel file

}
